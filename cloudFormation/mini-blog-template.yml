AWSTemplateFormatVersion: "2010-09-09"
Description: Infraestructura base para microservicios ECS + RDS + NLB

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.3.0/24
  RdsUserName:
    Type: String
  RdsPassword:
    Type: String
    NoEcho: true

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: blog-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: private-subnet-2

  ServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: security
      NamespaceId: !Ref CloudMapPrivateNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: blog-backend-cluster

  ClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref ECSCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1

  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: blog-backend-provider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 1000
        ManagedTerminationProtection: DISABLED

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to RDS from ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16

  RDSPostgres:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: 17.4
      MasterUsername: !Ref RdsUserName
      MasterUserPassword: !Ref RdsPassword
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      BackupRetentionPeriod: 0

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets privadas para RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  CloudMapPrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: internal.local
      Vpc: !Ref VPC
      Description: Namespace privado para ECS Service Discovery

  EncryptServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: encrypt-service-task
      RequiresCompatibilities:
        - EC2
      Cpu: "512"
      Memory: "744"
      NetworkMode: awsvpc
      ExecutionRoleArn: arn:aws:iam::621072895174:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::621072895174:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: security
          Essential: true
          Image: 621072895174.dkr.ecr.us-east-1.amazonaws.com/miniblog-security:latest  
          Cpu: 512
          Memory: 550
          PortMappings:
            - ContainerPort: 8082
              Protocol: tcp
              Name: security
  
  RegisterLoginTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: register-login-task
      RequiresCompatibilities:
        - EC2
      Cpu: "512"
      Memory: "744"
      NetworkMode: awsvpc
      ExecutionRoleArn: arn:aws:iam::621072895174:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::621072895174:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: register-login
          Essential: true
          Image: 621072895174.dkr.ecr.us-east-1.amazonaws.com/microblog-login-register:latest  
          Cpu: 512
          Memory: 550
          Environment:
            - Name: QUARKUS_DATASOURCE_JDBC_URL
              Value:  !Sub "jdbc:postgresql://${RDSPostgres.Endpoint.Address}:5432/postgres"
            - Name: QUARKUS_DATASOURCE_USERNAME
              Value: !Ref RdsUserName
            - Name: QUARKUS_DATASOURCE_PASSWORD
              Value: !Ref RdsPassword
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: register-login
  
  EncryptServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Security Encrypt Service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: sg-encrypt

  RegisterLoginSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Register Login Service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-register-login

  RegisterLoginService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ECSCluster
      - SecurityEncryptService
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref RegisterLoginTaskDefinition
      DesiredCount: 1
      CapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1 
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt RegisterLoginSecurityGroup.GroupId

  SecurityEncryptService:
    Type: AWS::ECS::Service
    DependsOn: ECSCluster
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref EncryptServiceTaskDefinition
      DesiredCount: 1
      CapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !GetAtt EncryptServiceSecurityGroup.GroupId
          AssignPublicIp: DISABLED
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryService.Arn
          ContainerName: security

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-0e61bba03a6c49457
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref EncryptServiceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=blog-backend-cluster >> /etc/ecs/ecs.config
      LaunchTemplateName: blog-backend-template

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ecs-instance
          PropagateAtLaunch: true
